{"version":3,"sources":["images/avatar.jpg","Components/Avatar.js","Components/SiteHeader.js","Components/LinkButton.js","Components/LinkList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Avatar","Image","src","avatar","circular","size","centered","React","Component","SiteHeader","Header","as","textAlign","Container","inverted","className","LinkButton","Button","fluid","role","href","this","props","link","content","LinkList","List","Item","App","style","paddingTop","text","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,oC,8KCc5BC,E,uKARP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAOC,IAAKC,IAAQC,UAAQ,EAACC,KAAK,QAAQC,UAAU,S,GAJ/CC,IAAMC,W,kBCeZC,E,uKAbP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAU,UACtB,kBAAC,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAWD,UAAU,SAASE,SAAS,QACnC,yBAAKC,UAAU,eAAf,yB,GARKR,IAAMC,W,kBCehBQ,E,uKAdP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQH,UAAQ,EAACI,OAAK,EAClBP,GAAG,IACHQ,KAAK,OACLC,KAAMC,KAAKC,MAAMC,KACjBC,QAASH,KAAKC,MAAME,QACpBnB,KAAK,a,GATAE,IAAMC,WCgBhBiB,E,uKAbP,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAAC,EAAD,CAAYH,QAAQ,UAAUD,KAAK,wCAEvC,kBAACG,EAAA,EAAKC,KAAN,KACI,kBAAC,EAAD,CAAYH,QAAQ,YAAYD,KAAK,+C,GARlChB,IAAMC,WCadoB,MAXf,WACE,OACE,yBAAKC,MAAO,CAACC,WAAY,OACvB,kBAACjB,EAAA,EAAD,CAAWkB,MAAI,GACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.86a6cdf0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.c9b43f91.jpg\";","import React from 'react';\r\nimport { Image } from 'semantic-ui-react';\r\nimport avatar from '../images/avatar.jpg';\r\n\r\nclass Avatar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Image src={avatar} circular size='small' centered={true} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Avatar;","import React from 'react';\r\nimport Avatar from './Avatar';\r\nimport { Header, Container } from 'semantic-ui-react';\r\n\r\nclass SiteHeader extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header as='h3' textAlign='center'>\r\n                    <Avatar />\r\n                </Header>\r\n                <Container textAlign='center' inverted='true'>\r\n                    <div className='ui inverted'>@gmjeffreyjames</div>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SiteHeader;","import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nclass LinkButton extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button inverted fluid\r\n                    as='a' \r\n                    role='link' \r\n                    href={this.props.link}  \r\n                    content={this.props.content} \r\n                    size='big'\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LinkButton;\r\n","import React from 'react';\r\nimport { List } from 'semantic-ui-react';\r\nimport LinkButton from './LinkButton';\r\n\r\nclass LinkList extends React.Component {\r\n    render () {\r\n        return (\r\n            <List>\r\n                <List.Item>\r\n                    <LinkButton content='Twitter' link='https://twitter.com/gmjeffreyjames' />\r\n                </List.Item>\r\n                <List.Item>\r\n                    <LinkButton content='Instagram' link='https://instagram.com/gmjeffreyjames' />\r\n                </List.Item>\r\n            </List>  \r\n        );\r\n    }\r\n}\r\n\r\nexport default LinkList;","import React from 'react';\nimport SiteHeader from './Components/SiteHeader';\nimport LinkList from './Components/LinkList';\n\nimport { Container } from 'semantic-ui-react';\n\nfunction App() {\n  return (\n    <div style={{paddingTop: '2%'}}>\n      <Container text>\n        <SiteHeader />\n        <LinkList />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-less/semantic.less';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}